@inherits LayoutComponentBase

<CascadingAuthenticationState>
    <div class="flex h-screen bg-gray-100 overflow-hidden">
        <!-- Sidebar -->
        <AuthorizeView Context="mainUser">
            <Authorized>
                <aside class="bg-gradient-to-b from-[#052767] to-[#3a0647] text-white w-64 flex flex-col px-4 py-5 overflow-y-auto sticky top-0 hidden md:flex">
                    <!-- Logo -->
                    <LogoComponent />
                    <!-- Menu content -->
                    <SideBarContentComponent CanManagerUser="_canManagerUser"/>
                </aside>
            </Authorized>
        </AuthorizeView>

        <!-- Main content -->
        <div class="flex flex-col flex-1">
            <!-- Navbar -->
            <HeaderComponent Name="@_name" IsProfileDropdownOpen="_isProfileDropdownOpen" IsProfileDropdownOpenChanged="ToggleProfileDropdown"/>
            <!-- Page body -->
            <main class="flex-1 overflow-y-auto p-6 bg-gray-100">
                @Body
            </main>
            <!-- Footer -->
            <FooterComponent/>
        </div>
    </div>
</CascadingAuthenticationState>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? MyState { get; set; }

    bool _canManagerUser;
    string? _name;
    bool _isProfileDropdownOpen;

    protected override async Task OnInitializedAsync()
    {
        _canManagerUser = AuthService.CustomClaimChecker((await MyState!).User, DefaultClaims.ManageUser);

        try
        {
            var user = (await MyState!).User;
            _name = user.Claims.FirstOrDefault(c => c.Type == "Name")?.Value ?? user.Identity?.Name ?? "User";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _name = "User";
        }
    }
    void ToggleProfileDropdown()
    {
        _isProfileDropdownOpen = !_isProfileDropdownOpen;
    }
}
